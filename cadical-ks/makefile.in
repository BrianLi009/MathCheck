#==========================================================================#
# This is a 'makefile.in' template with '@CXX@' and '@CXXFLAGS@' parameters.
# This makefile requires GNU make.
#==========================================================================#

# The '../scripts/make-build-header.sh' script searches for the next two
# lines to figure out the compiler and compilation flags.  This information
# is then used to generate corresponding macros in 'build.hpp'.

CXX=@CXX@
CXXFLAGS=@CXXFLAGS@
CC:=$(shell which gcc 2>/dev/null || which clang 2>/dev/null || echo gcc)
CFLAGS:=-O2 -Wall

LIBS=@LIBS@

# Fallback to gcc and g++ if @CC@ and @CXX@ are not replaced
CXX ?= g++
# Fallback to default CXXFLAGS if @CXXFLAGS@ is not replaced
CXXFLAGS ?= -std=c++11 -O2

############################################################################
#    It is usually not necessary to change anything below this line!       #
############################################################################

APP=cadical.cpp mobical.cpp
SRC=$(sort $(wildcard ../src/*.cpp))
SUB=$(subst ../src/,,$(SRC))
LIB=$(filter-out $(APP),$(SUB))
OBJ=$(LIB:.cpp=.o)
DIR=../$(shell pwd|sed -e 's,.*/,,')
COMPILE_CXX=$(CXX) $(CXXFLAGS) -I$(DIR)
COMPILE_C=$(CC) $(CFLAGS) -I$(DIR)

# Nauty object files (expanded list)
NAUTY_OBJS = ../../nauty2_8_8/nauty.o ../../nauty2_8_8/nautil.o ../../nauty2_8_8/naugraph.o \
             ../../nauty2_8_8/schreier.o ../../nauty2_8_8/naurng.o ../../nauty2_8_8/gtools.o \
             ../../nauty2_8_8/nautinv.o ../../nauty2_8_8/nautycliquer.o ../../nauty2_8_8/gutil1.o \
             ../../nauty2_8_8/gutil2.o ../../nauty2_8_8/gtnauty.o ../../nauty2_8_8/addedgeg.o

NAUTY_PATH = ../../nauty2_8_8
LABELG = $(NAUTY_PATH)/labelg

#--------------------------------------------------------------------------#

all: libcadical.a cadical-ks cadical mobical $(LABELG)

#--------------------------------------------------------------------------#

.SUFFIXES: .cpp .o .c

%.o: ../src/%.cpp ../src/*.hpp makefile
	$(COMPILE_CXX) -c $<

%.o: ../../nauty2_8_8/%.c
	$(COMPILE_C) -c $< -o $@

#--------------------------------------------------------------------------#

# Application binaries (the stand alone solver 'cadical' and the model based
# tester 'mobical') and the library are the main build targets.

cadical-ks: cadical-ks.o libcadical.a makefile
	$(COMPILE_CXX) -o $@ $< -L. -lcadical $(LDFLAGS) $(LIBS)

cadical: cadical.o libcadical.a makefile
	$(COMPILE_CXX) -o $@ $< -L. -lcadical $(LDFLAGS) $(LIBS)

mobical: mobical.o libcadical.a makefile
	$(COMPILE_CXX) -o $@ $< -L. -lcadical $(LDFLAGS) $(LIBS)

libcadical.a: $(OBJ) $(NAUTY_OBJS) $(LABELG) makefile
	ar rc $@ $(OBJ) $(NAUTY_OBJS)

../../nauty2_8_8/%.o: ../../nauty2_8_8/%.c
	$(CC) $(CFLAGS) -c $< -o $@

#--------------------------------------------------------------------------#

# Note that 'build.hpp' is generated and resides in the build directory.

build.hpp: always
	../scripts/make-build-header.sh > build.hpp

version.o: build.hpp

update:
	../scripts/update-version.sh

#--------------------------------------------------------------------------#

# These two 'C' interfaces include '.h' headers and thus require explicitly
# defined additional dependencies.

ccadical.o: ../src/ccadical.h
ipasir.o: ../src/ipasir.h ../src/ccadical.h

#--------------------------------------------------------------------------#

analyze: all
	$(COMPILE_CXX) --analyze ../src/*.cpp

format:
	clang-format -i ../*/*.[ch]pp
	clang-format -i ../*/*.[ch]
	clang-format -i ../test/*/*.[ch]pp
	clang-format -i ../test/*/*.[ch]

clean:
	rm -f *.o *.a cadical mobical makefile build.hpp
	rm -f *.gcda *.gcno *.gcov gmon.out
	$(MAKE) -C $(NAUTY_PATH) clean

test: all
	CADICALBUILD="$(DIR)" $(MAKE) -j1 -C ../test

#--------------------------------------------------------------------------#

.PHONY: all always analyze clean test update format

$(LABELG): $(NAUTY_OBJS)
	$(MAKE) -C $(NAUTY_PATH) labelg

$(info CC is set to $(CC))